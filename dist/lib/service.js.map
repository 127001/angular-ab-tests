{"version":3,"file":"service.js","sourceRoot":"","sources":["../../lib/service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Inject } from '@angular/core';\nimport { AbTestOptions } from './module';\nimport { AbTestForRealUser, AbTestForCrawler, CookieHandler, CrawlerDetector, RandomExtractor } from './classes';\nimport { CONFIG, AB_TESTS_COOKIE_HANDLER_TOKEN, AB_TESTS_CRAWLER_DETECTOR_TOKEN, AB_TESTS_RANDOM_EXTRACTOR_TOKEN } from './injection-tokens';\nimport { error } from './error';\n\nexport const COOKIE_NAMESPACE = 'angular-ab-tests';\n\n@Injectable()\nexport class AbTestsService {\n  private _tests: { [x: string]: AbTestForRealUser | AbTestForCrawler } = {};\n  private _cookieHandler: CookieHandler;\n  private _randomExtractor: RandomExtractor;\n  private _defaultScope: string = 'default';\n\n  constructor(\n    @Inject(CONFIG) configs: AbTestOptions[],\n    @Inject(AB_TESTS_COOKIE_HANDLER_TOKEN) cookieHandler: CookieHandler,\n    @Inject(AB_TESTS_CRAWLER_DETECTOR_TOKEN) crawlerDetector: CrawlerDetector,\n    @Inject(AB_TESTS_RANDOM_EXTRACTOR_TOKEN) randomExtractor: RandomExtractor\n  ) {\n    this._cookieHandler = cookieHandler;\n    this._randomExtractor = randomExtractor;\n    var isCrawler: boolean = crawlerDetector.isCrawler();\n    for (let config of configs) {\n      let scope: string = this._defaultScope;\n      if (!!config.scope) {\n        scope = config.scope;\n      }\n      if (!!this._tests[scope]) {\n        error('Test with scope <' + scope + '> cannot be initialized twice');\n      }\n      if (isCrawler) {\n        this.setupTestForCrawler(scope, this.filterVersions(config.versions), config);\n      } else {\n        this.setupTestForRealUser(scope, this.filterVersions(config.versions), config);\n      }\n    }\n  }\n\n  shouldRender(versions: string[], scope: string, forCrawlers: boolean): boolean {\n    let scopeOrDefault = scope || this._defaultScope;\n    if (!this._tests[scopeOrDefault]) {\n      error('Test with scope <' + scopeOrDefault + '> has not been defined');\n    }\n    return this._tests[scopeOrDefault].shouldRender(versions, forCrawlers);\n  }\n\n  private filterVersions(versions: string[]): string[] {\n    let resp:string[] = [];\n    if (versions.length < 2) {\n      error('You have to provide at least two versions');\n    }\n    for (let version of versions) {\n      if (resp.indexOf(version) !== -1) {\n        error('Version <' + version + '> is repeated in the array of versions [ ' + versions.join(', ') + ' ]');\n      }\n      resp.push(version);\n    }\n    return resp;\n  }\n\n  private setupTestForCrawler(scope: string, versions: string[], config: AbTestOptions) {\n    if (!!config.versionForCrawlers && versions.indexOf(config.versionForCrawlers) === -1) {\n      error('Version for crawlers <' + config.versionForCrawlers + '> is not included in versions [ ' + versions.join(', ') + ' ]');\n    }\n    this._tests[scope] = new AbTestForCrawler(config.versionForCrawlers);\n  }\n\n  private setupTestForRealUser(scope: string, versions: string[], config: AbTestOptions) {\n    let chosenVersion: string = this.generateVersion({\n      versions: versions,\n      cookieName: COOKIE_NAMESPACE + '-' + scope,\n      domain: config.domain,\n      expiration: config.expiration,\n      weights: config.weights,\n    });\n    this._tests[scope] = new AbTestForRealUser(versions, chosenVersion);\n  }\n\n  private generateVersion(config: {\n    versions: string[],\n    cookieName: string,\n    domain?: string,\n    expiration?: number,\n    weights?: { [x: string]: number };\n  }): string {\n    let chosenVersion: string = this._cookieHandler.get(config.cookieName);\n    if (config.versions.indexOf(chosenVersion) !== -1) {\n      return chosenVersion;\n    }\n    this._randomExtractor.setWeights(this.processWeights(config.weights || {}, config.versions));\n    this._randomExtractor.setVersions(config.versions);\n    chosenVersion = this._randomExtractor.run();\n    this._cookieHandler.set(config.cookieName, chosenVersion, config.domain, config.expiration);\n    return chosenVersion;\n  }\n\n  private processWeights(weights: { [x: string]: number }, versions: string[]): [number, string][] {\n    let processedWeights: [number, string][] = [];\n    let totalWeight: number = 0;\n    let tempVersions: string[] = versions.slice(0);\n    let index: number = -100;\n    for (let key in weights) {\n      index = tempVersions.indexOf(key);\n      if (index === -1) {\n        error('Weight associated to <' + key + '> which is not included in versions [ ' + versions.join(', ') + ' ]');\n      }\n      tempVersions.splice(index, 1);\n      totalWeight += this.roundFloat(weights[key]);\n      processedWeights.push([totalWeight, key]);\n    }\n    if (index === -100) {\n      return [];\n    }\n    if (totalWeight >= 100) {\n      error('Sum of weights is <' + totalWeight + '>, while it should be less than 100');\n    }\n    let remainingWeight: number = this.roundFloat((100 - totalWeight) / tempVersions.length);\n    for (let version of tempVersions) {\n      totalWeight += remainingWeight;\n      processedWeights.push([totalWeight, version]);\n    }\n    processedWeights[processedWeights.length - 1] = [100, processedWeights[processedWeights.length - 1][1]];\n    return processedWeights;\n  }\n\n  private roundFloat(x: number): number {\n    return Math.round(x * 1000) / 1000;\n  }\n}\n"]}